{"version":3,"sources":["../src/app.js"],"names":[],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,mBAAS,OAAT,CAAiB,0BAAjB;AACA,IAAI,OAAO,EAAX;;AAEA,IAAI,aAAa,aAAG,gBAAH,CAAoB,cAApB,CAAjB;AACA,WAAW,EAAX,CAAc,MAAd,EAAqB,UAAC,KAAD,EAAW;AAC9B,UAAQ,KAAR;AACD,CAFD;;AAIA,WAAW,EAAX,CAAc,KAAd,EAAoB,YAAM;AACxB,UAAQ,GAAR,CAAY,IAAZ;AACD,CAFD;;AAIA,WAAW,EAAX,CAAc,OAAd,EAAsB,UAAC,GAAD,EAAS;AAC7B,UAAQ,GAAR,CAAY,IAAI,KAAhB;AACD,CAFD;;;;;;;;;;;;;;;;;;AAoBA,IAAI,MAAM,aAAG,gBAAH,CAAoB,cAApB,CAAV;AACA,IAAI,IAAJ,CAAS,eAAK,UAAL,EAAT,EAA4B,IAA5B,CAAiC,aAAG,iBAAH,CAAqB,cAArB,CAAjC;AACA,IAAI,MAAM,wBAAV;;;AAGA,IAAI,GAAJ,CAAQ,OAAR,EAAiB,eAAK,IAAL,CAAU,SAAV,EAAqB,QAArB,CAAjB;AACA,IAAI,MAAJ,CAAW,MAAX,EAAmB,cAAI,UAAvB;AACA,IAAI,GAAJ,CAAQ,aAAR,EAAuB,MAAvB;;;;AAIA,IAAI,GAAJ,CAAQ,qBAAW,IAAX,EAAR;AACA,IAAI,GAAJ,CAAQ,qBAAW,UAAX,CAAsB,EAAE,UAAU,KAAZ,EAAtB,CAAR;AACA,IAAI,GAAJ,CAAQ,6BAAR;AACA,IAAI,GAAJ,CAAQ,kBAAQ,MAAR,CAAe,eAAK,IAAL,CAAU,SAAV,EAAqB,QAArB,CAAf,EAA+C,EAAE,QAAQ,KAAV,EAAiB,gBAAgB,KAAjC,EAAwC,UAAU,IAAlD,EAA/C,CAAR;;AAEA,IAAI,GAAJ,CAAQ,GAAR;AACA,IAAI,GAAJ,CAAQ,QAAR;;;AAKA,IAAI,GAAJ,CAAQ,UAAS,GAAT,EAAc,GAAd,EAAmB,IAAnB,EAAyB;AAC/B,MAAI,MAAM,IAAI,KAAJ,CAAU,WAAV,CAAV;AACA,MAAI,MAAJ,GAAa,GAAb;AACA,OAAK,GAAL;AACD,CAJD;;;AAOA,IAAI,IAAI,GAAJ,CAAQ,KAAR,MAAmB,aAAvB,EAAsC;AACpC,MAAI,GAAJ,CAAQ,UAAS,GAAT,EAAc,GAAd,EAAmB,GAAnB,EAAwB,IAAxB,EAA8B;AACpC,QAAI,MAAJ,CAAW,IAAI,MAAJ,IAAc,GAAzB;AACA,QAAI,MAAJ,CAAW,OAAX,EAAoB;AAClB,eAAS,IAAI,OADK;AAElB,aAAO;AAFW,KAApB;AAID,GAND;AAOD;;;AAGD,IAAI,GAAJ,CAAQ,UAAS,GAAT,EAAc,GAAd,EAAmB,GAAnB,EAAwB,IAAxB,EAA8B;AACpC,MAAI,MAAJ,CAAW,IAAI,MAAJ,IAAc,GAAzB;AACA,MAAI,MAAJ,CAAW,OAAX,EAAoB;AAClB,aAAS,IAAI,OADK;AAElB,WAAO;AAFW,GAApB;AAID,CAND;;;AASA,IAAI,MAAJ,CAAW,IAAX,EAAgB,WAAhB,EAA4B,UAAC,OAAD,EAAa;AACvC,UAAQ,GAAR;AACD,CAFD;;kBAIe,G","file":"app.js","sourcesContent":["import express from 'express';\nimport mongoose from 'mongoose';\nimport path from 'path';\nimport favicon from 'serve-favicon';\nimport morgan from 'morgan';\nimport cookieParser from 'cookie-parser';\nimport bodyParser from 'body-parser';\nimport index from './controllers/index.js';\nimport users from './controllers/users.js';\nimport ejs from 'ejs';\nimport http from 'http';\nimport fs from 'fs';\nimport zlib from 'zlib';\nimport util from 'util';\n\nmongoose.connect('mongodb://localhost/test');\nlet data = \"\";\n// 读取流\nlet readStream = fs.createReadStream('d:\\\\test.txt');\nreadStream.on('data',(chunk) => {\n  data += chunk;\n})\n\nreadStream.on('end',() => {\n  console.log(data);\n})\n\nreadStream.on('error',(err) => {\n  console.log(err.stack);\n})\n\n// 写入流\n// let ws = fs.createWriteStream(\"d:\\\\test1.txt\");\n// ws.write(\"hello world\", 'utf8');\n// ws.on('finish', () => {\n//   console.log('写入完成。');\n// });\n// ws.on('error', (err) => {\n//   console.log(err.stack);\n// });\n\n// 管道流\n// let rs1 = fs.createReadStream('d:\\\\test.txt');\n// let ws2 = fs.createWriteStream('d:\\\\test2.txt');\n// rs1.pipe(ws2);\n\n// 链式流\nlet rs1 = fs.createReadStream('d:\\\\test.txt');\nrs1.pipe(zlib.createGzip()).pipe(fs.createWriteStream('d:\\\\gzip.zip'))\nlet app = express();\n\n// view engine setup\napp.set('views', path.join(__dirname, 'views/'));\napp.engine('html', ejs.renderFile);\napp.set('view engine', 'html');\n\n// uncomment after placing your favicon in /public\n// app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(cookieParser());\napp.use(express.static(path.join(__dirname, 'public'), { 'etag': false, 'lastModified': false, 'maxAge': 1000 }));\n\napp.use('/', index);\napp.use('/users', users);\n\n\n\n// 全局错误捕获\napp.use(function(req, res, next) {\n  var err = new Error('Not Found');\n  err.status = 404;\n  next(err);\n});\n\n//开发环境错误捕获\nif (app.get('env') === 'development') {\n  app.use(function(err, req, res, next) {\n    res.status(err.status || 500);\n    res.render('error', {\n      message: err.message,\n      error: err\n    });\n  });\n}\n\n//生产环境错误捕获\napp.use(function(err, req, res, next) {\n  res.status(err.status || 500);\n  res.render('error', {\n    message: err.message,\n    error: {}\n  });\n});\n\n// http服务监听3000端口\napp.listen(3000,'localhost',(message) => {\n  console.log(`listen on port 3000`);\n});\n\nexport default app;\n"]}